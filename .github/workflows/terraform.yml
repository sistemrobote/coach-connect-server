name: Terraform Deploy

on:
  push:
    branches:
      - main

jobs:
  terraform:
    name: Apply Terraform in /terraform
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: terraform

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: ðŸ”§ Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Install Lambda dependencies
        run: npm ci

      - name: Build Lambda ZIP
        run: bash package.sh

      - name: Terraform Init
        run: terraform init

      - name: Import existing IAM role if it exists
        run: |
          terraform import aws_iam_role.lambda_exec lambda_exec_role_local || echo "IAM Role not found â€” skipping"

      - name: Import existing IAM policy if it exists
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          terraform import aws_iam_policy.secrets_access arn:aws:iam::${ACCOUNT_ID}:policy/AllowLambdaSecretsAccess-local || echo "IAM Policy not found â€” skipping"

      - name: Import existing Lambda function if it exists
        run: |
          if aws lambda get-function --function-name my-node-app-local; then
            terraform import aws_lambda_function.app my-node-app-local
          else
            echo "Lambda not found â€” skipping"
          fi
      - name: Import existing Lambda permission if it exists
        run: |
          # Check if the statement ID exists on the Lambda policy
          set -e
          POLICY=$(aws lambda get-policy --function-name my-node-app-local --query 'Policy' --output text || true)
          if echo "$POLICY" | grep -q '"Sid":"AllowAPIGatewayInvoke-local"'; then
            terraform import aws_lambda_permission.apigw my-node-app-local/AllowAPIGatewayInvoke-local
            echo "Permission imported"
          else
            echo "Lambda permission not found â€” skipping import"
          fi

      - name: Terraform Apply (local environment)
        run: terraform apply -var-file="local.tfvars" -auto-approve
        env:
          TF_VAR_env_vars: >-
            {
              "STRAVA_CLIENT_ID": "${{ secrets.STRAVA_CLIENT_ID }}",
              "STRAVA_CLIENT_SECRET": "${{ secrets.STRAVA_CLIENT_SECRET }}",
              "REDIRECT_URI": "${{ secrets.REDIRECT_URI }}",
              "NODE_ENV": "test",
              "LOG_LEVEL": "info",
              "API_KEY": "test-1234"
            }
          TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
